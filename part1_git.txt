# part1_git.txt
# 깃이란?
# 깃은 형상관리 시스템의 한 종류로, 프로그래밍 코드가 담긴 파일들의
# 버전을 관리하기 위한 가장 인기 있는 버전 관리 프로그램이다.
# 사용 방법
# 1. git 설치
# 2. git 명령어 수행
# 3. git으로 저장소 설정을 하지 않았다면 .git 폴더가 없을 것이다.
# 3-1. git init으로 저장소를 최초 생성한다.
# 4. 현재 저장소의 상태를 확인: git status
# gitignore.io: windows, mac, linux, python, vscode 등등 검색해서 설정하기(제작)
# 5. 변경된 파일이 있으면 그 중 새로운 버전에 올릴 파일만 골라서 추가해야 한다.
# 5-1. 이를 스테이징이라고 부르며, 명령어는 아래와 같다.(꺾쇠 빼기)
git add <파일명>
git add test.py
# 5-2. 혹은 변경사항이 있는 모든 파일을 스테이징하고 싶다면,
# 마침표를 적어서 all을 의미할 수 있다.
git add .
# ======= staging 끝 =======
# 버전에 추가시킬 파일을 정했다(staging)면
# 버전을 확정(commit)해야 한다.
git commit -m "해당 버전에 대한 설명"
# -m 옵션: 메시지를 남기겠다-라는 의미의 옵션이다.
git commit -m "init"
# 처음으로 저장소(repository)를 만든 경우, 첫 커밋할 때
# init이라고 적어주는 게 좋다.
# 0. 개인 설정
# 해당 폴더에서 git을 관리하는 사람이 누구인지 작성을 해주어야 한다.
# 이 때 사용하는 것이 git config이며
# 주로 개인 PC를 사용하는 경우, global로 설정하면
# 어떤 폴더에 가서 하더라도 설정을 추가로 할 필요가 없다.(기본값 설정)
# 공용 PC를 사용하는 경우, 해당 폴더에만 적용되게 local로 설정
git config --local user.name "<닉네임>"
git config --local user.name "minJeongHwan9651"
# 전역 설정
git config --global user.name "minJeongHwan9651"
# 이름 뿐만 아니라 이메일도 설정을 해주어야 한다.
# 이 이메일을 github에서 로그인할 때 사용했던 이메일로 설정하면
# 자동으로 그 계정과 연동을 시켜준다.(프로필 노출)
git config list
git config --local user.email "<개인이메일>"
git config --local user.email "qwertty40@naver.com"
# ===== 개인적으로 백업/버전관리 하는 용도 =====
# 원격 저장소(github)와 로컬 저장소(현재 폴더)를 연결하는 명령어
# 원격에 올리는 것이기 때문에 remote라는 명령어로 시작한다.
# 현재 원격 연결 상태를 보여주는 명령어
git remote -v
# 원격 저장소 추가
git remote add <원격 저장소 이름> <원격 저장소 url>
git remote add origin https://github.com/minJeongHwan9651/git-basic-test.git
# 원격 저장소에 변경사항 업로드(동기화) 방법
git push <원격 저장소 이름> <대상 브랜치 이름>
git push origin main
# 다른 장소에서 내가 올린 코드를 그대로 받아서 이어서 작업을 하고 싶다.
# 코드를 clone 해야 한다.
# 1. 클론한 코드를 저장할 폴더를 만든다.
# 2. git bash를 켠다
# 3. git clone <저장소 url> [저장할 하위 폴더 이름]
git clone https://github.com/minJeongHwan9651/git-basic-test.git 
